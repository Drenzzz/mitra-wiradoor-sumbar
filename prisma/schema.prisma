// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// Model user - Disesuaikan untuk NextAuth
model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String? // Dibuat opsional untuk provider non-credential
  role          Role      @default(STAF)
  accounts      Account[]
  sessions      Session[]
  articles      Article[]
  passwordResetToken  String?
  passwordResetExpires DateTime?
  @@unique([passwordResetToken])
  passwordChangeToken   String?   
  passwordChangeExpires DateTime?
  @@unique([passwordChangeToken])
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}


// Model kategori
model Category {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  name        String    @unique
  description String?
  products    Product[]
  deletedAt   DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

// Model produk
model Product {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  description    String
  specifications String
  imageUrl       String
  deletedAt      DateTime?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  // Kunci relasi ke Kategori
  categoryId String   @db.ObjectId
  category   Category @relation(fields: [categoryId], references: [id])
}

// Model inquiry
model Inquiry {
  id          String        @id @default(auto()) @map("_id") @db.ObjectId
  senderName  String
  senderEmail String
  subject     String
  message     String
  status      InquiryStatus @default(NEW)
  createdAt   DateTime      @default(now())
}

// Model Kategori Artikel
model ArticleCategory {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  name        String    @unique
  description String?
  articles    Article[]
  deletedAt   DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

// Model artikel
model Article {
  id               String        @id @default(auto()) @map("_id") @db.ObjectId
  title            String
  slug             String        @unique
  content          String
  featuredImageUrl String
  status           ArticleStatus @default(DRAFT)
  publishedAt      DateTime?
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  deletedAt        DateTime?

  // Kunci relasi ke User
  authorId String @db.ObjectId
  author   User   @relation(fields: [authorId], references: [id])

  // Kunci relasi ke Kategori Artikel
  categoryId String          @db.ObjectId
  category   ArticleCategory @relation(fields: [categoryId], references: [id])
}


// ENUM untuk Role Pengguna
enum Role {
  ADMIN
  STAF
}

// ENUM untuk Status Pesan Masuk
enum InquiryStatus {
  NEW
  READ
  REPLIED
}

// ENUM untuk Status Artikel
enum ArticleStatus {
  PUBLISHED
  DRAFT
}
